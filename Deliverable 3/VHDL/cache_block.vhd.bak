library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity cache_block is
	port(
		read            : in std_logic;
		write           : in std_logic;
		data_in         : in std_logic_vector(31 downto 0);
		tag_in          : in std_logic_vector(5 downto 0);
		block_index_in  : in std_logic_vector(4 downto 0);
		block_offset_in : in std_logic_vector(1 downto 0);
		dirty_clr       : in std_logic);
	
end cache_block

architecture a1 of cache_block is
    TYPE MEM IS ARRAY (31 downto 0) OF STD_LOGIC_VECTOR(127 DOWNTO 0);
    SIGNAL ram_block         : MEM;

    cache_block_process : process(clock) -- component in data_path
    begin
        if (clock'event and clock = '1') then
            if (block_offset_in = "00") then --block offset to determine data_out data postition
                data_out_comp(32 downto 1) <= data_in_comp;
            elsif (block_offset_in = "01") then
                data_out_comp(65 downto 34) <= data_in_comp;
            elsif (block_offset_in = "10") then
                data_out_comp(98 downto 67) <= data_in_comp;
            elsif (block_offset_in = "11") then
                data_out_comp(131 downto 100) <= data_in_comp;
            end if;

            if (dirty_clr = '1') then   --dirty bit clear 1 -> 0 dirty, controlled by controller
                if (block_offset_in = "00") then
                    data_out_comp(0) <= '0';
                elsif (block_offset_in = "01") then
                    data_out_comp(33) <= '0';
                elsif (block_offset_in = "10") then
                    data_out_comp(66) <= '0';
                elsif (block_offset_in = "11") then
                    data_out_comp(99) <= '0';
                end if;
            elsif (dirty_clr = '0') then -- 0 -> 1 dirty, 
                if (block_offset_in = "00") then
                    data_out_comp(0) <= '1';
                elsif (block_offset_in = "01") then
                    data_out_comp(33) <= '1';
                elsif (block_offset_in = "10") then
                    data_out_comp(66) <= '1';
                elsif (block_offset_in = "11") then
                    data_out_comp(99) <= '1';
                end if;
            end if;

            if (tag_in = data_in_comp(14 downto 9)) then --if tags match - valid
                valid_out <= '1';
            elsif (tag_in /= data_in_comp(14 downto 9)) then
                valid_out <= '0';
            end if;

            if (read = '1' or write = '1') then -- 'release' data upon read or write signal
                data_out <= data_out_comp;
                tag_out  <= tag_in;
                valid    <= valid_out;
            end if;
        end if;
    end process;

end a1;